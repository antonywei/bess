# Copyright (c) 2014-2016, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import scapy.all as scapy
import time
import socket,struct
from test_utils import *
#import pdb
# 'show module' command shows detailed stats/parameters

pkt_size = int($BESS_PKT_SIZE!'60')
assert(60 <= pkt_size <= 1522)

eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32')
ip = scapy.IP(src='10.5.0.1', dst='10.0.0.2')   # dst IP is overwritten
tcp = scapy.TCP(sport=10001, dport=10002)
payload = ('hello' + '0123456789' * 200)[:pkt_size-len(eth/ip/tcp)]
pkt = eth/ip/tcp/payload
pkt_data = bytes(pkt)

# NOTE: without quick_rampup=1, it takes a while to converge to
# the desied load level, especially when flow duration is pareto distribution

def gen_packet(proto, src_ip, dst_ip,src_port,dst_port):
    eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32')
    ip = scapy.IP(src=src_ip, dst=dst_ip)
    tcp = proto(sport=src_port, dport=dst_port)
    payload = 'helloworld'
    pkt = eth/ip/tcp/payload
    return bytes(pkt)

packets = [gen_packet(scapy.TCP, '172.16.100.1', '10.0.0.1',src_port=10001,dst_port=10002),
           gen_packet(scapy.TCP, '172.12.55.99', '12.34.56.78',10003,10004)
          ]

portList = [{"src_port":10001,"dst_port":10002,"gate":0},
              {"src_port":10003,"dst_port":10004,"gate":1}]
portList2 = [{"src_port":10001,"dst_port":10002,"gate":2},
              {"src_port":10003,"dst_port":10004,"gate":3}]
portList3 = [{"src_port":10001,"dst_port":10002,"gate":4},
              {"src_port":10003,"dst_port":10004,"gate":5}]
portList4 = [{"src_port":10001,"dst_port":10002,"gate":6},
              {"src_port":10003,"dst_port":10004,"gate":7}]
pm = portMatch(port_list=portList)

FlowGen(template=pkt_data,pps=1e4)->Rewrite(templates=packets) -> pm

pm:0 -> Sink()
pm:1 -> Sink()
pm:2 -> Sink()
pm:3 -> Sink()
pm:4 -> Sink()
pm:5 -> Sink()
pm:6 -> Sink()
pm:7 -> Sink()
pm:8 -> Sink()
pm:9 -> Sink()
pm:10 -> Sink()
pm:11 -> Sink()

bess.resume_all()
time.sleep(5)
stats = pm.add(port_list=portList2,Threshold=1000)
time.sleep(5)
stats = pm.add(port_list=portList3,Threshold=1000)
time.sleep(5)
stats = pm.add(port_list=portList4,Threshold=1000)

